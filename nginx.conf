daemon off;

# this sets the user nginx will run as,
#and the number of worker processes
user nobody nogroup;
worker_processes  auto;

# setup where nginx will log errors to
# and where the nginx process id resides
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
	worker_connections  1024;
}

http {
	include     /etc/nginx/mime.types;
	include 	/etc/nginx/nginx-gz.conf;

	default_type application/octet-stream;
	access_log /var/log/nginx/access.log combined;

	# use the kernel sendfile
	sendfile        on;
	# prepend http headers before sendfile()
	tcp_nopush		on;
	tcp_nodelay		on;

	# use the socket we configured in our unicorn.rb
	upstream unicorn_server {
		server unix:/tmp/sockets/unicorn.sock
		fail_timeout=0;
	}

	# configure the virtual host
	server {
		# replace this with your static Sinatra app files, root + public
		root /usr/src/app/public;
		# port to listen for requests on
		listen 443 ssl;
		# maximum accepted body size of client request
		client_max_body_size 30M;
		# the server will close connections after this time
		ssl_certificate      /etc/ssl/nginx/certificate.pem;
		ssl_certificate_key  /etc/ssl/nginx/key.pem;
		include nginx-ssl.conf;

		keepalive_timeout	3600s;
		keepalive_disable	none;
		keepalive_requests  100000;

		server_name album-manager.marathon.mesos;
		status_zone album-manager;

		location / {
			try_files $uri @app;
		}

		location @app {
			  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			  proxy_set_header Host $http_host;
			  proxy_redirect off;
			  # pass to the upstream unicorn server mentioned above
			  proxy_pass http://unicorn_server;
		}
		
        location /status.html { 
        	root /usr/share/nginx/html/;
        }
        
        location /status {
            status;
        }
		
	}
}