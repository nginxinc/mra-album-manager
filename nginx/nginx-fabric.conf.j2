{% macro location(name) -%}
  location /{{ name }}.oss/ {
    proxy_pass https://{{ name }}.oss/;
    proxy_set_header Host {{ name }}.oss.{{internal_domain_name}};

    proxy_ssl_session_reuse     on;
    proxy_ssl_protocols         TLSv1.2;
    proxy_ssl_verify            off;
    proxy_read_timeout          3600;
    proxy_connect_timeout       3600;

    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Accept-Encoding "";

  }
{%- endmacro %}

error_log /var/log/nginx/error.log debug;
worker_processes  auto;

events {
  worker_connections  1024;
}

daemon off;

http {

  include mime.types;
  include nginx-gz.conf;
  resolver {{ resolver.host }} valid={{ resolver.ttl }};  #use local DNS and override TTL to whatever value makes sense
  resolver_timeout 2s;
  client_max_body_size 30M;

  {% for name, service in services.iteritems() %}
  upstream {{ name }}.oss {
    server          {{ name }}.oss.{{ service.server }}:{{ service.oss_port }};
    zone backend    64k;
    keepalive       300;
  }
  {% endfor %}

  server {
    listen 80;

    {% for name, service in services.iteritems() %}
      {{ location(name) }}
    {% endfor %}

    location / {
      return         301 https://$host$request_uri;
    }
  }

  server {
    listen       443 ssl;

    ssl_certificate      /etc/ssl/nginx/certificate.pem;
    ssl_certificate_key  /etc/ssl/nginx/key.pem;
    include nginx-ssl.conf;

    keepalive_timeout	3600s;
    keepalive_disable	none;
    keepalive_requests  100000;

    server_name {{ name }}.oss;

    root {{ root }};

    include default-location.conf;

    {% for name, service in services.iteritems() if service.expose_external%}
      {{ location(name) }}
    {% endfor %}
  }
}
